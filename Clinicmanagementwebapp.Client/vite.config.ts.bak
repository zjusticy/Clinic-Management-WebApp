import { fileURLToPath, URL } from 'node:url';

import { defineConfig, loadEnv } from 'vite';
import plugin from '@vitejs/plugin-react';
import basicSsl from '@vitejs/plugin-basic-ssl';
import fs from 'fs';
import path from 'path';
// import child_process from 'child_process';
// import { env } from 'process';

// if (!fs.existsSync(certFilePath) || !fs.existsSync(keyFilePath)) {
//   if (
//     0 !==
//     child_process.spawnSync(
//       'dotnet',
//       [
//         'dev-certs',
//         'https',
//         '--export-path',
//         certFilePath,
//         '--format',
//         'Pem',
//         '--no-password',
//       ],
//       { stdio: 'inherit' }
//     ).status
//   ) {
//     throw new Error('Could not create certificate.');
//   }
// }

// const target = env.ASPNETCORE_HTTPS_PORT
//   ? `https://localhost:${env.ASPNETCORE_HTTPS_PORT}`
//   : env.ASPNETCORE_URLS
//   ? env.ASPNETCORE_URLS.split(';')[0]
//   : 'https://localhost:7222';

// https://vitejs.dev/config/
export default defineConfig(({ mode }) => {
  const env = loadEnv(mode, process.cwd());

  const target = `${env.VITE_LOCAL_DEV_BACKEND_URL}:${env.VITE_PORT}`;

  const editor = env.VITE_LOCAL_DEV_BACKEND_URL;

  const baseFolder =
    env.APPDATA !== undefined && env.APPDATA !== ''
      ? `${env.APPDATA}/ASP.NET/https`
      : `${env.HOME}/.aspnet/https`;

  const certificateName = 'clinicmanagementwebapp.client';
  const certFilePath = path.join(baseFolder, `${certificateName}.pem`);
  const keyFilePath = path.join(baseFolder, `${certificateName}.key`);

  return {
    plugins: [plugin(), basicSsl()],
    resolve: {
      alias: {
        '@': fileURLToPath(new URL('./src', import.meta.url)),
      },
    },
    server: {
      proxy: {
        '/api': {
          target,
          secure: false,
        },
      },
      port: 5173,
      https: {
        ...(editor === 'vscode'
          ? {}
          : {
              key: fs.readFileSync(keyFilePath),
              cert: fs.readFileSync(certFilePath),
            }),
      },
    },
  };
});
